{
  "hash": "d002bbf9e341ef56dec80be1afbc382a",
  "result": {
    "markdown": "---\ntitle: \"R in 5 Minutes\"\nauthor: \"Max Sands\"\ndate: \"2022-11-23\"\nimage: image.png\neditor_options: \n  chunk_output_type: console\nmessage: false\nwarning: false\n---\n\n\n# Intro\n\nThe purpose of this article is 3-fold:\n\n1.  to demonstrate the basics of R as concisely as possible so that you can get up and running on your own projects, even if you've had no exposure to coding.\n\n2.  to act as a basic guide for the non-technical readers interested in following my Research Articles at a more granular level.\n\n3.  to familiarize myself with the process of writing and explaining topics before I publish my research (and to make sure that my website is working...)\n\n##### Quick Note\n\nI would quickly like to explain my background and why I think it is important to have a basic knowledge of 'coding':\n\nI am a Business & Investment Analyst, and 9 months ago I had absolutely no knowledge of 'coding'; my technical ability was comparable to that of your average dog. I can now tell you 9 months in that understanding the basics of 'coding' goes a *very* long way.\n\nFirstly, as long as you do a task correctly the first time in code, you can then automate away that task (and its different variations). Whether its performing the same calculations in an Excel file that your boss sends you every morning, or publishing your company's quarterly financial statements, the same principle applies.\n\nSecondly, we are living in a world where data is everywhere, and the ability to code allows one to dig into the data and draw valuable insights from it. For anyone in an analytical position (whether Financial Analyst, Medical Researcher, or CEO), this is extremely important and allows you to stand on the shoulders of giants.\n\nThirdly, you can leverage tools that others have built. There is so much free code on the web and someone else may have already built a tool or completed a task that you are trying to do. This is extremely helpful.\n\nLastly, a word of caution: *coding is not everything*. You can be the world's greatest coder, but if you lack the ability to build a logical, easily-explainable narrative from data, then your value is limited to the tools that you can build for others. In other words, true value comes from the ability to not only work with data, but also derive meaning from it and think originally.\n\nOk, that's all; let's get into it!\n\n# Learning R\n\nBefore you can use R, you need to install it along with RStudio on your computer. Next, run `install.packages(\"tidyverse\")`. The tidyverse is an R package that someone created which makes working with data easy.\n\nNext, we need to load this package by running `library(tidyverse)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nYou are all set - now we can begin.\n\n## The Basics of Data\n\nData is simply a spreadsheet of values, and we would like our data to be in a 'tidy' format.\n\n### Tidy Data\n\nData is considered tidy when each column represents a variable and each row consists of an observation. Consider the following dataset (and feel free to inspect the code and guess what each line means):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut       |color |clarity | depth| table| price|    x|    y|    z|\n|-----:|:---------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|  0.23|Ideal     |E     |SI2     |  61.5|    55|   326| 3.95| 3.98| 2.43|\n|  0.21|Premium   |E     |SI1     |  59.8|    61|   326| 3.89| 3.84| 2.31|\n|  0.23|Good      |E     |VS1     |  56.9|    65|   327| 4.05| 4.07| 2.31|\n|  0.29|Premium   |I     |VS2     |  62.4|    58|   334| 4.20| 4.23| 2.63|\n|  0.31|Good      |J     |SI2     |  63.3|    58|   335| 4.34| 4.35| 2.75|\n|  0.24|Very Good |J     |VVS2    |  62.8|    57|   336| 3.94| 3.96| 2.48|\n\n</div>\n:::\n:::\n\n\nNotice how this data is tidy; each column represents a variable (price, color, etc.) and each row is an observed diamond. Your goal should be to have your data in this format because it is easy to manipulate.\n\n## Gathering Data\n\nData is typically gathered from an API, a database, or simply an Excel/csv spreadsheet that you may have. For now, we will use a built-in R dataset called diamonds.\n\n## Manipulating Data\n\nAs long as data is in a tidy format, there are only a few actions that we need to do when manipulating data:\n\n| `filter`    | filter data according to certain conditions   |\n|-------------|-----------------------------------------------|\n| `summarize` | summarize the data (e.g. finding the average) |\n| `group`     | group similar observations                    |\n| `pivot`     | 'pivoting' the data in different ways         |\n| `select`    | select relevant information                   |\n| `mutate`    | changing the data in some fashion             |\n\n### Filtering\n\nLet's pretend that we only want to consider diamonds with a carat greater than .7 and a depth greater than 63: (click on the \"Code\" section)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    filter(carat > .7 & depth > 63) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut       |color |clarity | depth| table| price|    x|    y|    z|\n|-----:|:---------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|  0.78|Very Good |G     |SI2     |  63.8|    56|  2759| 5.81| 5.85| 3.72|\n|  0.96|Fair      |F     |SI2     |  66.3|    62|  2759| 6.27| 5.95| 4.07|\n|  0.75|Very Good |D     |SI1     |  63.2|    56|  2760| 5.80| 5.75| 3.65|\n|  0.91|Fair      |H     |SI2     |  64.4|    57|  2763| 6.11| 6.09| 3.93|\n|  0.91|Fair      |H     |SI2     |  65.7|    60|  2763| 6.03| 5.99| 3.95|\n|  0.71|Very Good |D     |SI1     |  63.6|    58|  2764| 5.64| 5.68| 3.60|\n\n</div>\n:::\n:::\n\n\nLet's continue to filter down and consider only the subset with a cut of \"Very Good\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    filter(carat > .7 & depth > 63) %>% \n    filter(cut == \"Very Good\") %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut       |color |clarity | depth| table| price|    x|    y|    z|\n|-----:|:---------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|  0.78|Very Good |G     |SI2     |  63.8|  56.0|  2759| 5.81| 5.85| 3.72|\n|  0.75|Very Good |D     |SI1     |  63.2|  56.0|  2760| 5.80| 5.75| 3.65|\n|  0.71|Very Good |D     |SI1     |  63.6|  58.0|  2764| 5.64| 5.68| 3.60|\n|  0.71|Very Good |G     |VS1     |  63.3|  59.0|  2768| 5.52| 5.61| 3.52|\n|  0.72|Very Good |G     |VS2     |  63.7|  56.4|  2776| 5.62| 5.69| 3.61|\n|  0.75|Very Good |D     |SI2     |  63.1|  58.0|  2782| 5.78| 5.73| 3.63|\n\n</div>\n:::\n:::\n\n\nYou will now see that we have from our original 53,940 diamonds, we have filtered down to 1,550 that adhere to our conditions.\n\nAt this point you may have two questions:\n\n1.  What is the `%>%`?\n\nThis is called a pipe and you can translate it to \"and then\". It allows us to perform several operations consecutively. So if we look at the code, we first start with the diamonds dataset by typing `diamonds`, *and then* we `filter` according to carat and depth, *and then* we `filter` according to cut. The pipe is extremely useful and it is native to R.\n\n2.  What does the `head()` function do?\n\nIt prints only the first 6 observations, that way you don't have a table with 50,000 rows on your screen.\n\n3.  What if I want to filter down to several different cuts, not just \"Very Good\"\n\nGreat question, here's what you would do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    filter(cut %in% c(\"Ideal\", \"Premium\")) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut     |color |clarity | depth| table| price|    x|    y|    z|\n|-----:|:-------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|  0.23|Ideal   |E     |SI2     |  61.5|    55|   326| 3.95| 3.98| 2.43|\n|  0.21|Premium |E     |SI1     |  59.8|    61|   326| 3.89| 3.84| 2.31|\n|  0.29|Premium |I     |VS2     |  62.4|    58|   334| 4.20| 4.23| 2.63|\n|  0.23|Ideal   |J     |VS1     |  62.8|    56|   340| 3.93| 3.90| 2.46|\n|  0.22|Premium |F     |SI1     |  60.4|    61|   342| 3.88| 3.84| 2.33|\n|  0.31|Ideal   |J     |SI2     |  62.2|    54|   344| 4.35| 4.37| 2.71|\n\n</div>\n:::\n:::\n\n\nWe tell R to filter down to the observations where cut matches one of the strings in the vector `c(\"Ideal\", \"Premium\")`. The `c()` function creates a vector.\n\n### Summarizing\n\nLet's say we want to summarize the data and find the average diamond price, along with its standard deviation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    summarize(avg_price = mean(price),\n              st_dev    = sd(price))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| avg_price|  st_dev|\n|---------:|-------:|\n|    3932.8| 3989.44|\n\n</div>\n:::\n:::\n\n\nNotice that we can take our 50,000+ diamonds and summarize the data down to an average price...\n\nYou will notice that in the `summarize` function I start by naming the column I want (avg_price) and then I tell R what to do (find the `mean` of the price variable/column. The `mean()` & `sd()` functions calculate mean and standard deviation respectively). I could just as easily call the columns \"thing1\" & \"thing2\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    summarize(thing1 = mean(price),\n              thing2    = sd(price))\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| thing1|  thing2|\n|------:|-------:|\n| 3932.8| 3989.44|\n\n</div>\n:::\n:::\n\n\n### Grouping\n\nSummarizing the entire data is important, but let's say we want to find the average diamond price within each color group...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    group_by(color) %>% \n    summarize(avg_price = mean(price)) %>% \n    ungroup()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|color | avg_price|\n|:-----|---------:|\n|D     |  3169.954|\n|E     |  3076.752|\n|F     |  3724.886|\n|G     |  3999.136|\n|H     |  4486.669|\n|I     |  5091.875|\n|J     |  5323.818|\n\n</div>\n:::\n:::\n\n\nWe can take things a step further and group by color *and* cut...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    group_by(color, cut) %>% \n    summarize(avg_price = mean(price)) %>% \n    ungroup() %>% \n    slice(1:10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|color |cut       | avg_price|\n|:-----|:---------|---------:|\n|D     |Fair      |  4291.061|\n|D     |Good      |  3405.382|\n|D     |Very Good |  3470.467|\n|D     |Premium   |  3631.293|\n|D     |Ideal     |  2629.095|\n|E     |Fair      |  3682.312|\n|E     |Good      |  3423.644|\n|E     |Very Good |  3214.652|\n|E     |Premium   |  3538.914|\n|E     |Ideal     |  2597.550|\n\n</div>\n:::\n:::\n\n\nYou will notice that we now have average price for each color and cut. I also only showed the first 10 rows of output by using the `slice()` function.\n\n### Pivoting\n\nPivoting is probably the most complicated of the broad actions I am showing you, but the previous segment allows for a great transition. I decided to show only the first 10 rows of output rather than inundate you with 35 rows, but there must be a better way of showing the output, right? I mean we have letters repeating in the color column. This would make more sense:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    group_by(color, cut) %>% \n    summarize(avg_price = mean(price)) %>% \n    ungroup() %>% \n    pivot_wider(\n        names_from  = cut,\n        values_from = avg_price\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|color |     Fair|     Good| Very Good|  Premium|    Ideal|\n|:-----|--------:|--------:|---------:|--------:|--------:|\n|D     | 4291.061| 3405.382|  3470.467| 3631.293| 2629.095|\n|E     | 3682.312| 3423.644|  3214.652| 3538.914| 2597.550|\n|F     | 3827.003| 3495.750|  3778.820| 4324.890| 3374.939|\n|G     | 4239.255| 4123.482|  3872.754| 4500.742| 3720.706|\n|H     | 5135.683| 4276.255|  4535.390| 5216.707| 3889.335|\n|I     | 4685.446| 5078.533|  5255.880| 5946.181| 4451.970|\n|J     | 4975.655| 4574.173|  5103.513| 6294.592| 4918.186|\n\n</div>\n:::\n:::\n\n\nWe tell R to take our 35 row table, and pivot it so that we have a color column followed by columns with the different cuts, wherein each value is the average price.\n\nThe `names_from` argument asks us what variable to we want to pivot on (we said 'cut' and therefore R took all of the cut values and made them columns). The `values_from` argument asks us which variable we would like to R to occupy the new columns with (we said 'avg_price' and therefore R occupied all of the 'cells' in our pivot table with the corresponding values from the avg_price column).\n\n*Quick Tip*: hitting the *tab* key when your cursor is inside of a function's parentheses will show all of the function's available arguments (2 of which are `names_from` and `values_from` for the `pivot_longer()` function.)\n\n*Important Note*: You will notice that now we have violated the premise of tidy data. The columns `Fair:Ideal` are *not* variables. They are types of \"cut\" (cut is the variable). For the purposes of coding, and data manipulation, we want our data to be in a tidy format. However, for the purposes of presentation, we typically want our data to be in a 'wide' format (hence `pivot_wider`).\n\nWe can do the opposite and revert our table back into a 'long' format with `pivot_longer()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    group_by(color, cut) %>% \n    summarize(avg_price = mean(price)) %>% \n    ungroup() %>% \n    pivot_wider(\n        names_from  = cut,\n        values_from = avg_price\n    ) %>% \n    pivot_longer(\n        cols = Fair:Ideal\n    ) %>% \n    slice(1:10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|color |name      |    value|\n|:-----|:---------|--------:|\n|D     |Fair      | 4291.061|\n|D     |Good      | 3405.382|\n|D     |Very Good | 3470.467|\n|D     |Premium   | 3631.293|\n|D     |Ideal     | 2629.095|\n|E     |Fair      | 3682.312|\n|E     |Good      | 3423.644|\n|E     |Very Good | 3214.652|\n|E     |Premium   | 3538.914|\n|E     |Ideal     | 2597.550|\n\n</div>\n:::\n:::\n\n\nWe can also rename the columns back to their original names within the `pivot_longer()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    group_by(color, cut) %>% \n    summarize(avg_price = mean(price)) %>% \n    ungroup() %>% \n    pivot_wider(\n        names_from  = cut,\n        values_from = avg_price\n    ) %>% \n    pivot_longer(\n        cols      = Fair:Ideal,\n        names_to  = \"cut\",\n        values_to = \"avg_price\"\n    ) %>% \n    slice(1:10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|color |cut       | avg_price|\n|:-----|:---------|---------:|\n|D     |Fair      |  4291.061|\n|D     |Good      |  3405.382|\n|D     |Very Good |  3470.467|\n|D     |Premium   |  3631.293|\n|D     |Ideal     |  2629.095|\n|E     |Fair      |  3682.312|\n|E     |Good      |  3423.644|\n|E     |Very Good |  3214.652|\n|E     |Premium   |  3538.914|\n|E     |Ideal     |  2597.550|\n\n</div>\n:::\n:::\n\n\nThat's on pivoting...\n\n### Selecting\n\nSelecting is straightforward. Here are the first 6 rows of our original dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut       |color |clarity | depth| table| price|    x|    y|    z|\n|-----:|:---------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|  0.23|Ideal     |E     |SI2     |  61.5|    55|   326| 3.95| 3.98| 2.43|\n|  0.21|Premium   |E     |SI1     |  59.8|    61|   326| 3.89| 3.84| 2.31|\n|  0.23|Good      |E     |VS1     |  56.9|    65|   327| 4.05| 4.07| 2.31|\n|  0.29|Premium   |I     |VS2     |  62.4|    58|   334| 4.20| 4.23| 2.63|\n|  0.31|Good      |J     |SI2     |  63.3|    58|   335| 4.34| 4.35| 2.75|\n|  0.24|Very Good |J     |VVS2    |  62.8|    57|   336| 3.94| 3.96| 2.48|\n\n</div>\n:::\n:::\n\n\nLet's say we are about to investigate something but we only real need price, carat, and cut... then it is best practice to select those variables/columns first (imagine we have thousands of variables/columns...):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    select(price, carat, cut) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| price| carat|cut       |\n|-----:|-----:|:---------|\n|   326|  0.23|Ideal     |\n|   326|  0.21|Premium   |\n|   327|  0.23|Good      |\n|   334|  0.29|Premium   |\n|   335|  0.31|Good      |\n|   336|  0.24|Very Good |\n\n</div>\n:::\n:::\n\n\nWe can also select by omission:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    select(-x, -y, -z) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut       |color |clarity | depth| table| price|\n|-----:|:---------|:-----|:-------|-----:|-----:|-----:|\n|  0.23|Ideal     |E     |SI2     |  61.5|    55|   326|\n|  0.21|Premium   |E     |SI1     |  59.8|    61|   326|\n|  0.23|Good      |E     |VS1     |  56.9|    65|   327|\n|  0.29|Premium   |I     |VS2     |  62.4|    58|   334|\n|  0.31|Good      |J     |SI2     |  63.3|    58|   335|\n|  0.24|Very Good |J     |VVS2    |  62.8|    57|   336|\n\n</div>\n:::\n:::\n\n\nWe can select variables carat *through* clarity:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    select(carat:clarity) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| carat|cut       |color |clarity |\n|-----:|:---------|:-----|:-------|\n|  0.23|Ideal     |E     |SI2     |\n|  0.21|Premium   |E     |SI1     |\n|  0.23|Good      |E     |VS1     |\n|  0.29|Premium   |I     |VS2     |\n|  0.31|Good      |J     |SI2     |\n|  0.24|Very Good |J     |VVS2    |\n\n</div>\n:::\n:::\n\n\nAnd again by omission:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    select(-carat:-clarity) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| depth| table| price|    x|    y|    z|\n|-----:|-----:|-----:|----:|----:|----:|\n|  61.5|    55|   326| 3.95| 3.98| 2.43|\n|  59.8|    61|   326| 3.89| 3.84| 2.31|\n|  56.9|    65|   327| 4.05| 4.07| 2.31|\n|  62.4|    58|   334| 4.20| 4.23| 2.63|\n|  63.3|    58|   335| 4.34| 4.35| 2.75|\n|  62.8|    57|   336| 3.94| 3.96| 2.48|\n\n</div>\n:::\n:::\n\n\nVery simple.\n\n### Mutating\n\nWhat if we want to perform some sort of calculation or change the data in some way? This is the purpose of mutating...\n\nIn our dataset, we have the variables `x, y, z` which represent the length, width, and height of the diamond. If we pretend all the diamonds are cubes, we can calculate the cubic volume of each diamond by multiplying the dimensions of each diamond. Let's do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    select(x:z) %>% \n    mutate(volume = x * y * z) %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|    x|    y|    z|   volume|\n|----:|----:|----:|--------:|\n| 3.95| 3.98| 2.43| 38.20203|\n| 3.89| 3.84| 2.31| 34.50586|\n| 4.05| 4.07| 2.31| 38.07688|\n| 4.20| 4.23| 2.63| 46.72458|\n| 4.34| 4.35| 2.75| 51.91725|\n| 3.94| 3.96| 2.48| 38.69395|\n\n</div>\n:::\n:::\n\n\nNotice how `mutate()` is similar in structure to `summarize()`; first we tell R what we would like name our new variable/column (\"volume\"), and then we tell R how to calculate it.\n\nMutate can also change a current column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    mutate(carat = \"Hello World\") %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|carat       |cut       |color |clarity | depth| table| price|    x|    y|    z|\n|:-----------|:---------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|Hello World |Ideal     |E     |SI2     |  61.5|    55|   326| 3.95| 3.98| 2.43|\n|Hello World |Premium   |E     |SI1     |  59.8|    61|   326| 3.89| 3.84| 2.31|\n|Hello World |Good      |E     |VS1     |  56.9|    65|   327| 4.05| 4.07| 2.31|\n|Hello World |Premium   |I     |VS2     |  62.4|    58|   334| 4.20| 4.23| 2.63|\n|Hello World |Good      |J     |SI2     |  63.3|    58|   335| 4.34| 4.35| 2.75|\n|Hello World |Very Good |J     |VVS2    |  62.8|    57|   336| 3.94| 3.96| 2.48|\n\n</div>\n:::\n:::\n\n\nNow, all observations of carat are \"Hello World\".\n\n## Basic Modeling\n\nWe will build a linear model to explain diamond prices. In R, the function to create a linear model is `lm()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    lm(formula = price ~ carat) %>% \n    summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = price ~ carat, data = .)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-18585.3   -804.8    -18.9    537.4  12731.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -2256.36      13.06  -172.8   <2e-16 ***\ncarat        7756.43      14.07   551.4   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1549 on 53938 degrees of freedom\nMultiple R-squared:  0.8493,\tAdjusted R-squared:  0.8493 \nF-statistic: 3.041e+05 on 1 and 53938 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nWe just built a linear model that regressed carat on diamond price. As you can see, we can use a diamond's caratage to explain 85% of price variation. Our model also tells us that for every 1 unit increase in caratage, diamond prices increases by \\$7,756 on average.\n\nHowever, I'm sure you will agree that the output is not visually pleasing. Moreover, it is not easy to manipulate since it is not in a tabular format.\n\nLet's, once again, stand on the shoulders of giants and utilize a tool that someone else has built to clean up the output. Just like you installed `tidyverse`, install the `broom` package by running `install.packages(\"broom\")`. Then, load the package by running `library(broom)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\n```\n:::\n\n\nThis time let's regress price on all other variables and use the `tidy()` function from the broom package to tidy the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    lm(formula = price ~ .) %>% \n    summary() %>% \n    tidy()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|term        |     estimate|  std.error|    statistic|   p.value|\n|:-----------|------------:|----------:|------------:|---------:|\n|(Intercept) |  5753.761857| 396.629824|   14.5066294| 0.0000000|\n|carat       | 11256.978307|  48.627509|  231.4940348| 0.0000000|\n|cut.L       |   584.457278|  22.478150|   26.0011290| 0.0000000|\n|cut.Q       |  -301.908158|  17.993919|  -16.7783441| 0.0000000|\n|cut.C       |   148.034703|  15.483328|    9.5609097| 0.0000000|\n|cut^4       |   -20.793893|  12.376508|   -1.6801098| 0.0929418|\n|color.L     | -1952.160010|  17.341767| -112.5698421| 0.0000000|\n|color.Q     |  -672.053621|  15.776995|  -42.5970601| 0.0000000|\n|color.C     |  -165.282926|  14.724927|  -11.2247022| 0.0000000|\n|color^4     |    38.195186|  13.526539|    2.8237221| 0.0047487|\n|color^5     |   -95.792932|  12.776114|   -7.4978145| 0.0000000|\n|color^6     |   -48.466440|  11.613917|   -4.1731348| 0.0000301|\n|clarity.L   |  4097.431318|  30.258596|  135.4137965| 0.0000000|\n|clarity.Q   | -1925.004097|  28.227228|  -68.1967102| 0.0000000|\n|clarity.C   |   982.204550|  24.151516|   40.6684433| 0.0000000|\n|clarity^4   |  -364.918493|  19.285011|  -18.9223900| 0.0000000|\n|clarity^5   |   233.563110|  15.751700|   14.8278029| 0.0000000|\n|clarity^6   |     6.883492|  13.715100|    0.5018915| 0.6157459|\n|clarity^7   |    90.639737|  12.103482|    7.4887321| 0.0000000|\n|depth       |   -63.806100|   4.534554|  -14.0710870| 0.0000000|\n|table       |   -26.474085|   2.911655|   -9.0924516| 0.0000000|\n|x           | -1008.261098|  32.897748|  -30.6483316| 0.0000000|\n|y           |     9.608887|  19.332896|    0.4970226| 0.6191751|\n|z           |   -50.118891|  33.486301|   -1.4966983| 0.1344776|\n\n</div>\n:::\n:::\n\n\nYou will notice that I used '.' to tell R 'all other variables' rather than type each of them out. More importantly, the output is much cleaner and easier to manipulate.\n\nHowever, we cannot see the model's accuracy. For this, we need to use the `glance()` function from broom:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    lm(formula = price ~ .) %>% \n    summary() %>% \n    glance()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| r.squared| adj.r.squared|    sigma| statistic| p.value| df| df.residual|  nobs|\n|---------:|-------------:|--------:|---------:|-------:|--:|-----------:|-----:|\n| 0.9197915|     0.9197573| 1130.094|  26881.83|       0| 23|       53916| 53940|\n\n</div>\n:::\n:::\n\n\nNow we have accuracy metrics in a nice format.\n\nLastly, if we would like to see the model's fit for each observation, we can use the `augment()` function from broom (scroll to the right):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    lm(formula = price ~ .) %>% \n    augment() %>% \n    head()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| price| carat|cut       |color |clarity | depth| table|    x|    y|    z|    .fitted|    .resid|      .hat|   .sigma|   .cooksd| .std.resid|\n|-----:|-----:|:---------|:-----|:-------|-----:|-----:|----:|----:|----:|----------:|---------:|---------:|--------:|---------:|----------:|\n|   326|  0.23|Ideal     |E     |SI2     |  61.5|    55| 3.95| 3.98| 2.43| -1346.3643| 1672.3643| 0.0003742| 1130.082| 0.0000342|  1.4801217|\n|   326|  0.21|Premium   |E     |SI1     |  59.8|    61| 3.89| 3.84| 2.31|  -664.5954|  990.5954| 0.0004133| 1130.097| 0.0000132|  0.8767411|\n|   327|  0.23|Good      |E     |VS1     |  56.9|    65| 4.05| 4.07| 2.31|   211.1071|  115.8929| 0.0009098| 1130.105| 0.0000004|  0.1025982|\n|   334|  0.29|Premium   |I     |VS2     |  62.4|    58| 4.20| 4.23| 2.63|  -830.7372| 1164.7372| 0.0004062| 1130.094| 0.0000180|  1.0308641|\n|   335|  0.31|Good      |J     |SI2     |  63.3|    58| 4.34| 4.35| 2.75| -3459.2242| 3794.2242| 0.0007715| 1129.987| 0.0003629|  3.3587358|\n|   336|  0.24|Very Good |J     |VVS2    |  62.8|    57| 3.94| 3.96| 2.48| -1380.4876| 1716.4876| 0.0007230| 1130.081| 0.0000696|  1.5194380|\n\n</div>\n:::\n:::\n\n\n*The broom package is so useful because it cleans up model output, but more importantly, it can be used with many other (more complex) models.*\n\n## Visualizing Data\nBeing able to visualize data is *essential* for understanding it; the famous saying \"a picture is worth a thousands words\" is doubly true in today's age.\n\nLet's start out by plotting diamond price against caratage.\n\n### Creating a Canvas\nFirst we need to create a canvas with the `ggplot()` function:\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\nNotice that we start with the `diamonds` dataset *and then* we create a canvas with the `ggplot()` function. The `aes()` function stands for aesthetic and allows us to pick which variables/columns we want to use in our plot. In this case we tell R that we want to plot `carat` on the x-axis and `price` on the y-axis.\n\n### Adding Geoms\nIn our plot we would like to add dots that represent each data point. In R adding these elements are called *geometries* (i.e. geoms):\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\nNotice how when creating plots with ggplot, we can no longer use the pipe (`%>%`). Instead, we use a `+` sign to add layers to the plot.\n\nFrom our plot we can tell that there is a clear positive relationship between price and caratage.\n\n### Modifying Geoms\nOur plot contains so many points and it is overwhelming; let's modify the plot so that the points are more transparent with the `alpha` argument of `geom_point()`.\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price)) +\n    geom_point(alpha = .15, color = \"midnightblue\") +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\nYou will notice that the points are more transparent and that we also modified their color. We also included a smoother line with `geom_smooth()`.\n\n### Adding Aesthetics\nUp to now our plot has had only 2 aesthetics (x and y). But, all of the arguments that can be passed to geoms (`alpha`, `color`, etc.) are actually aesthetics that can be passed in the main `aes()` function. This probably sounds confusing but the following code will make much more sense:\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\nYou will notice that instead of locally changing the `color` argument in the `geom_point()` function, we have put in the main `aes()` function wherein we set it equal to `cut`. By doing this, we are telling R that the color of each geometry should be defined by the cut variable/column.\n\n### Faceting\nOur plot is overwhelming with all the different colors on one canvas so lets create a faceted canvas... Rather than explain in words, the following code should be self evident:\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth() +\n    facet_wrap(~cut)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\nThis is called a faceted plot because we have created facets according to the cut variable/column. You will note that we need to put a `~` before the specified variable; this is just how the facet_wrap function works.\n\nWe can also decide to facet according to some other variables, like so:\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth() +\n    facet_wrap(~clarity, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\nYou will notice that I also supplied the `scales` argument within the `facet_wrap()` function which allows each faceted plot to have different x and y scales that fit accordingly. Compare the x and y axes of the 'VS1' plot with those of the 'VVS2'. They have different scales.\n\n### Adding Labels\nLet's add labels to our plot...\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth() +\n    facet_wrap(~cut) +\n    labs(\n        title = \"Price vs. Carat\",\n        subtitle = \"ggplot makes plotting so easy...\",\n        y = \"Price (in $)\",\n        x = \"Carat\",\n        caption = \"This is a great-looking plot\"\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Changing Theme\nR has some preset plotting themes...\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth() +\n    facet_wrap(~cut) +\n    labs(\n        title = \"Price vs. Carat\",\n        subtitle = \"ggplot makes plotting so easy...\",\n        y = \"Price (in $)\",\n        x = \"Carat\",\n        caption = \"This is a great-looking plot\"\n    ) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth() +\n    facet_wrap(~cut) +\n    labs(\n        title = \"Price vs. Carat\",\n        subtitle = \"ggplot makes plotting so easy...\",\n        y = \"Price (in $)\",\n        x = \"Carat\",\n        caption = \"This is a great-looking plot\"\n    ) +\n    theme_linedraw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n...there are several others.\n\n### Modifying Scales\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = carat, y = price, color = cut)) +\n    geom_point(alpha = .15) +\n    geom_smooth() +\n    facet_wrap(~cut) +\n    labs(\n        title = \"Price vs. Carat\",\n        subtitle = \"ggplot makes plotting so easy...\",\n        y = \"Price (in $)\",\n        x = \"Carat\",\n        caption = \"This is a great-looking plot\"\n    ) +\n    theme_bw() +\n    scale_y_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nWith these basic tools, you now have the ability to create so many different types of plots to gain insights from your data.\n\nHere are a few more plots with code to give you a flavor...\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(price, fill = cut)) +\n    geom_histogram() +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(price, fill = cut)) +\n    geom_histogram(position = \"dodge\") +\n    theme_bw() +\n    scale_fill_brewer()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(price, fill = cut)) +\n    geom_density() +\n    theme_bw() +\n    scale_fill_brewer() +\n    facet_wrap(~cut)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\nThere are other packages that help with creating nice plots... install and load `ggridges`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\ndiamonds %>% \n    ggplot(aes(x = price, y = cut, fill = stat(x))) +\n    geom_density_ridges_gradient(scale = 2) +\n    scale_fill_viridis_c(name = \"Price (in $)\", option = \"C\") +\n    theme_minimal() +\n    scale_x_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n    ggplot(aes(x = price, y = cut, fill = factor(stat(quantile)))) +\n    stat_density_ridges(\n        geom = \"density_ridges_gradient\", calc_ecdf = TRUE,\n        quantiles = 4, quantile_lines = TRUE\n    ) +\n    scale_fill_brewer() +\n    theme_linedraw() +\n    scale_x_continuous(labels = scales::dollar_format())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nThis is just a taste of the plots that can be generated...\n\n# Closing Remarks\nThe above is by no means a comprehensive introduction to R, but it does cover the basics and will allow you to get started on your own projects.\n\nCheers.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}